import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from dotenv import load_dotenv
import g4f

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("RENDER_EXTERNAL_URL")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

bot = Bot(token=BOT_TOKEN)
bot.set_current(bot)
dp = Dispatcher(storage=MemoryStorage())

user_requests = {}
FREE_LIMIT = 6

async def ask_gpt(message_text: str) -> str:
    try:
        response = await g4f.ChatCompletion.create_async(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": message_text}],
            provider=g4f.Provider.You
        )
        return response
    except Exception as e:
        return f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: {e}"

@dp.message(F.text == "/start")
async def start_handler(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üé£ –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Ä—ã–±–∞–ª–∫–µ: –≥–¥–µ –ª–æ–≤–∏—Ç—å, –Ω–∞ —á—Ç–æ, –∫–æ–≥–¥–∞ –∏ –∫–∞–∫.\n\n"
        "–¢—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: ‚Äò–ì–¥–µ –ª–æ–≤–∏—Ç—å —â—É–∫—É –ª–µ—Ç–æ–º?‚Äô\n\n"
        "üîπ –î–æ—Å—Ç—É–ø–Ω–æ 6 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤, –¥–∞–ª–µ–µ ‚Äî –Ω—É–∂–Ω–∞ –æ–ø–ª–∞—Ç–∞."
    )

@dp.message()
async def handle_message(message: Message):
    user_id = message.from_user.id
    count = user_requests.get(user_id, 0)

    if count >= FREE_LIMIT:
        await message.answer("üö´ –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É.")
        return

    user_requests[user_id] = count + 1
    await message.answer("‚åõ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
    reply = await ask_gpt(message.text)
    await message.answer(reply)

async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)

def create_app():
    app = web.Application()
    dp.startup.register(on_startup)
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp)
    return app

if __name__ == '__main__':
    web.run_app(create_app(), port=int(os.environ.get('PORT', 10000)))
