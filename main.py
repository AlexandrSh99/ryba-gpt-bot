import os
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web
from dotenv import load_dotenv
from collections import defaultdict
import g4f

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_HOST = os.getenv("RENDER_EXTERNAL_URL")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ü–∞–º—è—Ç—å –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_requests = defaultdict(int)

# –û—Ç–≤–µ—Ç—ã
START_MESSAGE = (
    "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –†—ã–±–∞–ì–∏–¥ ‚Äî –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –≤ –æ–±—É—á–µ–Ω–∏–∏ —Ä—ã–±–∞–ª–∫–µ.\n"
    "–Ø –ø–æ–¥—Å–∫–∞–∂—É –ø–æ —Å–Ω–∞—Å—Ç—è–º, —Ç–µ—Ö–Ω–∏–∫–∞–º –ª–æ–≤–ª–∏ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º –≤–æ–¥–æ—ë–º–æ–≤.\n\n"
    "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ 6 –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ—Ç–æ–º ‚Äî –¥–æ—Å—Ç—É–ø –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã."
)
LIMIT_MESSAGE = "‚ùå –í—ã –∏–∑—Ä–∞—Å—Ö–æ–¥–æ–≤–∞–ª–∏ 6 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è ‚Äî –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø."

@dp.message(F.text == "/start")
async def cmd_start(message: Message):
    await message.answer(START_MESSAGE)

@dp.message(F.text)
async def handle_request(message: Message):
    user_id = message.from_user.id
    if user_requests[user_id] >= 6:
        await message.answer(LIMIT_MESSAGE)
        return

    user_requests[user_id] += 1
    await message.answer("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")

    try:
        response = await g4f.ChatCompletion.create_async(
            model="gpt-4o-mini",
            provider=g4f.Provider.You,
            messages=[{"role": "user", "content": message.text}]
        )
        await message.answer(response)
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: {e}")

async def on_startup(app: web.Application):
    await bot.set_webhook(WEBHOOK_URL)


def create_app():
    app = web.Application()
    dp.startup.register(on_startup)
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp)
    return app

if __name__ == "__main__":
    web.run_app(create_app(), port=int(os.environ.get("PORT", 10000)))
