import logging
import os
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from aiohttp import web
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from openai import AsyncOpenAI
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
WEBHOOK_HOST = os.getenv("RENDER_EXTERNAL_URL")
WEBHOOK_PATH = "/webhook"
WEBHOOK_URL = f"{WEBHOOK_HOST}{WEBHOOK_PATH}"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
class UserState(StatesGroup):
    region = State()
    lake = State()
    allowed_requests = State()

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Å—Ç–∞—Ä—Ç
@dp.message(F.text == "/start")
async def cmd_start(message: Message, state: FSMContext):
    await state.clear()
    await state.update_data(requests_left=6)
    await message.answer("üé£ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –Ω–∞—É—á–∏—Ç—å—Å—è —Ä—ã–±–∞–ª–∫–µ.\n\n–ì–¥–µ —Ç—ã –ª–æ–≤–∏—à—å —Ä—ã–±—É? –ù–∞–ø–∏—à–∏ –æ–±–ª–∞—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è):")
    await state.set_state(UserState.region)

# –®–∞–≥ 1 ‚Äî –û–±–ª–∞—Å—Ç—å
@dp.message(UserState.region)
async def get_region(message: Message, state: FSMContext):
    await state.update_data(region=message.text)
    await message.answer("–£—Ç–æ—á–Ω–∏ –≤–æ–¥–æ—ë–º ‚Äî –æ–∑–µ—Ä–æ –∏–ª–∏ —Ä–µ–∫–∞:")
    await state.set_state(UserState.lake)

# –®–∞–≥ 2 ‚Äî –í–æ–¥–æ—ë–º
@dp.message(UserState.lake)
async def get_lake(message: Message, state: FSMContext):
    await state.update_data(lake=message.text)
    data = await state.get_data()
    await message.answer(f"–û—Ç–ª–∏—á–Ω–æ! üìç –†–∞–π–æ–Ω: {data['region']}, –≤–æ–¥–æ—ë–º: {data['lake']}\n\n–ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ —Ä—ã–±–∞–ª–∫–µ.")
    await state.set_state(None)

# –û—Å–Ω–æ–≤–Ω–æ–π —Ö–µ–Ω–¥–ª–µ—Ä
@dp.message()
async def handle_question(message: Message, state: FSMContext):
    data = await state.get_data()
    requests_left = data.get("requests_left", 0)

    if requests_left == 0:
        await message.answer("üîí –õ–∏–º–∏—Ç –∏–∑ 6 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω.\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å –æ–ø–ª–∞—Ç—É.")
        return

    try:
        await message.answer("‚è≥ –î—É–º–∞—é...")
        response = await openai_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": message.text}]
        )
        answer = response.choices[0].message.content.strip()
        await message.answer(answer)

        await state.update_data(requests_left=requests_left - 1)

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: {e}")

# –ó–∞–ø—É—Å–∫ –≤–µ–±—Ö—É–∫–∞
async def on_startup(app):
    await bot.set_webhook(WEBHOOK_URL)

def create_app():
    app = web.Application()
    dp.startup.register(on_startup)
    SimpleRequestHandler(dispatcher=dp, bot=bot).register(app, path=WEBHOOK_PATH)
    setup_application(app, dp)
    return app

if __name__ == "__main__":
    web.run_app(create_app(), port=int(os.environ.get("PORT", 10000)))
