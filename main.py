import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import CommandStart
from g4f.client import Client
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()
gpt_client = Client()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
user_requests = {}

# –ú–∞–∫—Å–∏–º—É–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
FREE_LIMIT = 6

@dp.message(CommandStart())
async def start(message: Message):
    await message.answer(
        "üé£ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è —Ä—ã–±–∞–ª–∫–µ.\n"
        "–ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ —Å–Ω–∞—Å—Ç–∏, –≤–æ–¥–æ—ë–º—ã, –Ω–∞–∂–∏–≤–∫–∏ –∏ —Ç.–¥.\n\n"
        "–ë–µ—Å–ø–ª–∞—Ç–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ 6 –∑–∞–ø—Ä–æ—Å–æ–≤, –¥–∞–ª—å—à–µ ‚Äî –æ–ø–ª–∞—Ç–∞ üí∞"
    )

@dp.message(F.text)
async def handle_message(message: Message):
    user_id = message.from_user.id
    user_requests[user_id] = user_requests.get(user_id, 0)

    if user_requests[user_id] >= FREE_LIMIT:
        await message.answer("üîí –õ–∏–º–∏—Ç –∏–∑ 6 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω. –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å ‚Äî –æ–ø–ª–∞—Ç–∏ –¥–æ—Å—Ç—É–ø.")
        return

    await message.answer("üïî –î—É–º–∞—é...")

    try:
        response = gpt_client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": message.text}]
        )
        user_requests[user_id] += 1
        await message.answer(response.choices[0].message.content)

    except Exception as e:
        logging.exception(e)
        await message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI.")

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
